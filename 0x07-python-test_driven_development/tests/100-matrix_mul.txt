>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

# Test with two 2x2 matrices of integers
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
[[19, 22], [43, 50]]

# Test with a 2x3 and a 3x2 matrix
>>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10], [11, 12]])
[[58, 64], [139, 154]]

# Test with identity matrix (should return the same matrix)
>>> matrix_mul([[1, 0], [0, 1]], [[5, 6], [7, 8]])
[[5, 6], [7, 8]]

# Test with an empty matrix
>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

# Test with non-list m_a
>>> matrix_mul("Not a list", [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

# Test with non-list m_b
>>> matrix_mul([[1, 2], [3, 4]], "Not a list")
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

# Test with non-rectangular m_a
>>> matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

# Test with non-rectangular m_b
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3]])
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

# Test with incompatible matrix sizes
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

# Test with non-integer/float elements in m_b
>>> matrix_mul([[1, 2], [3, 4]], [[1, 'a'], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

